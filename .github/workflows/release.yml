name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            name: agnt-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            name: agnt-aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: agnt-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: agnt-aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Package
        shell: bash
        run: |
          cp target/${{ matrix.target }}/release/agnt agnt
          chmod +x agnt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: agnt

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create tarballs
        run: |
          cd artifacts
          for dir in */; do
            tar -czf "${dir%/}.tar.gz" -C "$dir" .
          done
          ls -la

      - name: Generate checksums
        run: |
          cd artifacts
          sha256sum *.tar.gz > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*.tar.gz
            artifacts/checksums.txt

  update-homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download release assets
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "Downloading assets for version: ${VERSION}"
          # Download the tarballs to calculate checksums
          wget "https://github.com/${{ github.repository }}/releases/download/${VERSION}/agnt-x86_64-apple-darwin.tar.gz"
          wget "https://github.com/${{ github.repository }}/releases/download/${VERSION}/agnt-aarch64-apple-darwin.tar.gz"
          wget "https://github.com/${{ github.repository }}/releases/download/${VERSION}/agnt-x86_64-unknown-linux-gnu.tar.gz" || true
          wget "https://github.com/${{ github.repository }}/releases/download/${VERSION}/agnt-aarch64-unknown-linux-gnu.tar.gz" || true

      - name: Calculate checksums
        id: checksums
        run: |
          echo "SHA_X86_64=$(sha256sum agnt-x86_64-apple-darwin.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "SHA_AARCH64=$(sha256sum agnt-aarch64-apple-darwin.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          if [ -f "agnt-x86_64-unknown-linux-gnu.tar.gz" ]; then
            echo "SHA_LINUX_X86_64=$(sha256sum agnt-x86_64-unknown-linux-gnu.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          fi
          if [ -f "agnt-aarch64-unknown-linux-gnu.tar.gz" ]; then
            echo "SHA_LINUX_AARCH64=$(sha256sum agnt-aarch64-unknown-linux-gnu.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          fi

      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: pheuter/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap

      - name: Update formula
        run: |
          cd homebrew-tap
          # Update all values in one pass using awk
          awk \
            -v VERSION="${{ steps.version.outputs.VERSION }}" \
            -v SHA_X86_64="${{ steps.checksums.outputs.SHA_X86_64 }}" \
            -v SHA_AARCH64="${{ steps.checksums.outputs.SHA_AARCH64 }}" \
            -v SHA_LINUX_X86_64="${{ steps.checksums.outputs.SHA_LINUX_X86_64 }}" \
            -v SHA_LINUX_AARCH64="${{ steps.checksums.outputs.SHA_LINUX_AARCH64 }}" \
            '
            # Update version
            /version "/ {
                gsub(/version "[^"]*"/, "version \"" VERSION "\"")
            }
            
            # Track which section we are in
            /on_macos do/ { 
                in_macos = 1
                in_linux = 0
            }
            
            /on_linux do/ { 
                in_linux = 1
                in_macos = 0
            }
            
            # Handle macOS Intel SHA
            in_macos && /if Hardware::CPU\.intel\?/ {
                in_mac_intel = 1
            }
            
            in_mac_intel && /sha256/ {
                gsub(/sha256 "[^"]*"/, "sha256 \"" SHA_X86_64 "\"")
                in_mac_intel = 0
            }
            
            # Handle macOS ARM SHA
            in_macos && /else/ && !in_linux {
                in_mac_arm = 1
            }
            
            in_mac_arm && /sha256/ {
                gsub(/sha256 "[^"]*"/, "sha256 \"" SHA_AARCH64 "\"")
                in_mac_arm = 0
            }
            
            # Handle Linux Intel SHA
            in_linux && /if Hardware::CPU\.intel\?/ {
                in_linux_intel = 1
            }
            
            in_linux_intel && /sha256/ && SHA_LINUX_X86_64 {
                gsub(/sha256 "[^"]*"/, "sha256 \"" SHA_LINUX_X86_64 "\"")
                in_linux_intel = 0
            }
            
            # Handle Linux ARM SHA
            in_linux && /else/ {
                in_linux_arm = 1
            }
            
            in_linux_arm && /sha256/ && SHA_LINUX_AARCH64 {
                gsub(/sha256 "[^"]*"/, "sha256 \"" SHA_LINUX_AARCH64 "\"")
                in_linux_arm = 0
            }
            
            # Reset flags at end blocks
            /^  end/ {
                if (in_macos) {
                    in_macos = 0
                    in_mac_intel = 0
                    in_mac_arm = 0
                }
                if (in_linux) {
                    in_linux = 0
                    in_linux_intel = 0
                    in_linux_arm = 0
                }
            }
            
            { print }
            ' Formula/agnt.rb > Formula/agnt.rb.tmp && mv Formula/agnt.rb.tmp Formula/agnt.rb

      - name: Commit and push
        run: |
          cd homebrew-tap
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/agnt.rb
          git commit -m "Update agnt to ${{ steps.version.outputs.VERSION }}"
          git push
